name: Auto Version and Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Parse tag components
        id: parse_tag
        run: |
          if [[ "$latest_tag" =~ ^v([0-9]+)\\.([0-9]+)\\.([0-9]+)(-.+)?$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            suffix="${BASH_REMATCH[4]}"
          else
            major=0
            minor=0
            patch=0
            suffix=""
          fi
          echo "major=$major" >> $GITHUB_ENV
          echo "minor=$minor" >> $GITHUB_ENV
          echo "patch=$patch" >> $GITHUB_ENV
          echo "suffix=$suffix" >> $GITHUB_ENV

      - name: Determine next version
        id: calculate_version
        run: |
          # Lire le tag fourni
          provided_tag="${GITHUB_REF##*/}" # Extrait le tag fourni (ex. "major", "minor", "hotfix")

          if [[ "$provided_tag" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$provided_tag" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
            if [[ "$provided_tag" != "" && "$provided_tag" != "major" && "$provided_tag" != "minor" ]]; then
              suffix="-$provided_tag"
            else
              suffix=""
            fi
          fi

          # Construire la prochaine version complÃ¨te
          next_version="v$major.$minor.$patch$suffix"
          echo "next_version=$next_version" >> $GITHUB_ENV
          echo "Prochaine version : $next_version"

      - name: Create new tag
        run: |
          git tag ${{ env.next_version }} -m "Release ${{ env.next_version }}"
          git push origin ${{ env.next_version }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.next_version }}
          name: ${{ env.next_version }}
          body: "Automated release for ${{ env.next_version }}"